pivot_wider(species, names_from=.width, values_from=.upper)
fit1 %>%
mutate(species=reorder(factor(species),Freq),) %>%
pivot_wider(species, names_from=.width, values_from=.upper) %>%
filter(!! rlang::sym('p95') < 0)
fit1 %>%
mutate(species=reorder(factor(species),Freq),) %>%
pivot_wider(species, names_from=.width, values_from=.upper) %>%
select(., p50=`0.5`, p75=`0.75`, p90=`0.9`, p95=`0.95`, p97=`0.97`)
library(reshape2)
library(dplyr)
library(ggplot2)
library(tidyr)
library(phyloseq)
library(fido)
library(stringr)
library(metagMisc)
library(zCompositions)
library(driver)
library(ggdist)
fit1 <- readRDS("Mega_analysis_ORR_2.rds")
fit1$species <- gsub("f__|g__|s__|t__", "", fit1$species)
fit1$species <- gsub("_unclassified", "", fit1$species)
fit1 %>%
mutate(species=reorder(factor(species),Freq),) %>%
pivot_wider(species, names_from=.width, values_from=.upper) %>%
select(., p50=`0.5`, p75=`0.75`, p90=`0.9`, p95=`0.95`, p97=`0.97`)
fit1 %>%
mutate(species=reorder(factor(species),Freq),) %>%
pivot_wider(species, names_from=.width, values_from=.upper) %>%
dplyr::select(., p50=`0.5`, p75=`0.75`, p90=`0.9`, p95=`0.95`, p97=`0.97`)
fit1 %>%
mutate(species=reorder(factor(species),Freq),) %>%
pivot_wider(species, names_from=.width, values_from=.upper) %>%
dplyr::select(species, p50=`0.5`, p75=`0.75`, p90=`0.9`, p95=`0.95`, p97=`0.97`) %>%
filter(!! rlang::sym('p95') < 0)
fit1 %>%
mutate(species=reorder(factor(species),Freq),) %>%
pivot_wider(species, names_from=.width, values_from=.upper) %>%
dplyr::select(species, p50=`0.5`, p75=`0.75`, p90=`0.9`, p95=`0.95`, p97=`0.97`) %>%
filter(!! rlang::sym('p95') < -0.5)
fit1 %>%
mutate(species=reorder(factor(species),Freq),) %>%
pivot_wider(species, names_from=.width, values_from=.upper) %>%
dplyr::select(species, p50=`0.5`, p75=`0.75`, p90=`0.9`, p95=`0.95`, p97=`0.97`) %>%
filter(!! rlang::sym('p95') < 0.5)
fit1 %>%
mutate(species=reorder(factor(species),Freq),) %>%
pivot_wider(species, names_from=.width, values_from=.upper) %>%
dplyr::select(species, p50=`0.5`, p75=`0.75`, p90=`0.9`, p95=`0.95`, p97=`0.97`) %>%
filter(!! rlang::sym('p95') < -0.2)
sig_decreasing <- fit1 %>%
mutate(species=reorder(factor(species),Freq),) %>%
pivot_wider(species, names_from=.width, values_from=.upper) %>%
dplyr::select(species, p50=`0.5`, p75=`0.75`, p90=`0.9`, p95=`0.95`, p97=`0.97`) %>%
filter(!! rlang::sym('p95') < -0.2) %>%
mutate(species=factor(species)) %>%
select(species) %>%
pull() %>%
levels()
fit1 %>%
mutate(species=reorder(factor(species),Freq),) %>%
pivot_wider(species, names_from=.width, values_from=.upper) %>%
dplyr::select(species, p50=`0.5`, p75=`0.75`, p90=`0.9`, p95=`0.95`, p97=`0.97`) %>%
filter(!! rlang::sym('p95') < -0.2) %>%
mutate(species=factor(species))
it1 %>%
mutate(species=reorder(factor(species),Freq),) %>%
pivot_wider(species, names_from=.width, values_from=.upper) %>%
dplyr::select(species, p50=`0.5`, p75=`0.75`, p90=`0.9`, p95=`0.95`, p97=`0.97`) %>%
filter(!! rlang::sym('p95') < -0.2) %>%
mutate(species=factor(species)) %>%
select(species)
fit1 %>%
mutate(species=reorder(factor(species),Freq),) %>%
pivot_wider(species, names_from=.width, values_from=.upper) %>%
dplyr::select(species, p50=`0.5`, p75=`0.75`, p90=`0.9`, p95=`0.95`, p97=`0.97`) %>%
filter(!! rlang::sym('p95') < -0.2) %>%
mutate(species=factor(species)) %>%
dplyr::select(species) %>%
pull() %>%
levels()
sig_decreasing <- fit1 %>%
mutate(species=reorder(factor(species),Freq),) %>%
pivot_wider(species, names_from=.width, values_from=.upper) %>%
dplyr::select(species, p50=`0.5`, p75=`0.75`, p90=`0.9`, p95=`0.95`, p97=`0.97`) %>%
filter(!! rlang::sym('p95') < -0.2) %>%
mutate(species=factor(species)) %>%
dplyr::select(species) %>%
pull() %>%
levels()
sig_increasing <- fit1 %>%
mutate(species=reorder(factor(species),Freq),) %>%
pivot_wider(species, names_from=.width, values_from=.lower) %>%
select(species, p50=`0.5`, p75=`0.75`, p90=`0.9`, p95=`0.95`, p97=`0.97`) %>%
filter(!! rlang::sym('p95') > 0.2) %>%
mutate(species=factor(species)) %>%
select(species) %>%
pull() %>%
levels()
sig_decreasing <- fit1 %>%
mutate(species=reorder(factor(species),Freq),) %>%
pivot_wider(species, names_from=.width, values_from=.upper) %>%
dplyr::select(species, p50=`0.5`, p75=`0.75`, p90=`0.9`, p95=`0.95`, p97=`0.97`) %>%
filter(!! rlang::sym('p95') < -0.2) %>%
mutate(species=factor(species)) %>%
dplyr::select(species) %>%
pull() %>%
levels()
sig_increasing <- fit1 %>%
mutate(species=reorder(factor(species),Freq),) %>%
pivot_wider(species, names_from=.width, values_from=.lower) %>%
dplyr::select(species, p50=`0.5`, p75=`0.75`, p90=`0.9`, p95=`0.95`, p97=`0.97`) %>%
filter(!! rlang::sym('p95') > 0.2) %>%
mutate(species=factor(species)) %>%
dplyr::select(species) %>%
pull() %>%
levels()
p <- fit1 %>%
filter(species %in% c(sig_decreasing, sig_increasing)) %>%
ggplot(aes(y=reorder(factor(species),Freq), x=Freq, xmin=.lower, xmax=.upper)) +
ggdist::geom_interval(aes(alpha=.width), color="orange3") +
scale_alpha_continuous("Credible interval", range=c(.7, .15), breaks=c(0.5, 0.75, 0.90, 0.95, 0.97)) +
geom_point() +
theme(
legend.key=element_rect(fill='white'),
legend.text=element_text(size=10, color="black"),
legend.position=c(0.5, 0,8),
strip.background=element_blank(),
strip.text=element_blank(),
panel.grid.major=element_blank(),
panel.grid.minor=element_blank(),
panel.background=element_rect(fill="white"),
panel.border=element_rect(colour="black", fill=NA, size=1),
axis.ticks.length=unit(0.25,"cm"),
axis.text.x=element_text(size=8, color="black"),
axis.text.y=element_text(size=7.5, color="black")) +
labs(x="Log-Ratio Value", y=NULL) +
geom_vline(xintercept=0, linetype="dashed", color="darkgray")
p
sig_decreasing <- fit1 %>%
mutate(species=reorder(factor(species),Freq),) %>%
pivot_wider(species, names_from=.width, values_from=.upper) %>%
dplyr::select(species, p50=`0.5`, p75=`0.75`, p90=`0.9`, p95=`0.95`, p97=`0.97`) %>%
filter(!! rlang::sym('p95') < -0.1) %>%
mutate(species=factor(species)) %>%
dplyr::select(species) %>%
pull() %>%
levels()
sig_increasing <- fit1 %>%
mutate(species=reorder(factor(species),Freq),) %>%
pivot_wider(species, names_from=.width, values_from=.lower) %>%
dplyr::select(species, p50=`0.5`, p75=`0.75`, p90=`0.9`, p95=`0.95`, p97=`0.97`) %>%
filter(!! rlang::sym('p95') > 0.1) %>%
mutate(species=factor(species)) %>%
dplyr::select(species) %>%
pull() %>%
levels()
p <- fit1 %>%
filter(species %in% c(sig_decreasing, sig_increasing)) %>%
ggplot(aes(y=reorder(factor(species),Freq), x=Freq, xmin=.lower, xmax=.upper)) +
ggdist::geom_interval(aes(alpha=.width), color="orange3") +
scale_alpha_continuous("Credible interval", range=c(.7, .15), breaks=c(0.5, 0.75, 0.90, 0.95, 0.97)) +
geom_point() +
theme(
legend.key=element_rect(fill='white'),
legend.text=element_text(size=10, color="black"),
legend.position=c(0.5, 0,8),
strip.background=element_blank(),
strip.text=element_blank(),
panel.grid.major=element_blank(),
panel.grid.minor=element_blank(),
panel.background=element_rect(fill="white"),
panel.border=element_rect(colour="black", fill=NA, size=1),
axis.ticks.length=unit(0.25,"cm"),
axis.text.x=element_text(size=8, color="black"),
axis.text.y=element_text(size=7.5, color="black")) +
labs(x="Log-Ratio Value", y=NULL) +
geom_vline(xintercept=0, linetype="dashed", color="darkgray")
p
sig_decreasing <- fit1 %>%
mutate(species=reorder(factor(species),Freq),) %>%
pivot_wider(species, names_from=.width, values_from=.upper) %>%
dplyr::select(species, p50=`0.5`, p75=`0.75`, p90=`0.9`, p95=`0.95`, p97=`0.97`) %>%
filter(!! rlang::sym('p95') < -0.2) %>%
mutate(species=factor(species)) %>%
dplyr::select(species) %>%
pull() %>%
levels()
sig_increasing <- fit1 %>%
mutate(species=reorder(factor(species),Freq),) %>%
pivot_wider(species, names_from=.width, values_from=.lower) %>%
dplyr::select(species, p50=`0.5`, p75=`0.75`, p90=`0.9`, p95=`0.95`, p97=`0.97`) %>%
filter(!! rlang::sym('p95') > 0.2) %>%
mutate(species=factor(species)) %>%
dplyr::select(species) %>%
pull() %>%
levels()
p <- fit1 %>%
filter(species %in% c(sig_decreasing, sig_increasing)) %>%
ggplot(aes(y=reorder(factor(species),Freq), x=Freq, xmin=.lower, xmax=.upper)) +
ggdist::geom_interval(aes(alpha=.width), color="orange3") +
scale_alpha_continuous("Credible interval", range=c(.7, .15), breaks=c(0.5, 0.75, 0.90, 0.95, 0.97)) +
geom_point() +
theme(
legend.key=element_rect(fill='white'),
legend.text=element_text(size=10, color="black"),
legend.position=c(0.5, 0,8),
strip.background=element_blank(),
strip.text=element_blank(),
panel.grid.major=element_blank(),
panel.grid.minor=element_blank(),
panel.background=element_rect(fill="white"),
panel.border=element_rect(colour="black", fill=NA, size=1),
axis.ticks.length=unit(0.25,"cm"),
axis.text.x=element_text(size=8, color="black"),
axis.text.y=element_text(size=7.5, color="black")) +
labs(x="Log-Ratio Value", y=NULL) +
geom_vline(xintercept=0, linetype="dashed", color="darkgray")
p
fit1
grep("symbiosum","",fit1$species)
fit1$species
grep("Clostridium_symbiosum","",fit1$species)
grep("Clostridium_symbiosum",fit1$species)
fit1$species[grep("Clostridium_symbiosum",fit1$species),]
fit1[grep("Clostridium_symbiosum",fit1$species),]
ggsave(plot = p, filename = "Mega_analysis_ORR.pdf", width = 10, height = 14, device = "pdf")
ggsave(plot = p, filename = "Mega_analysis_ORR.pdf", width = 10, height = 10, device = "pdf")
ggsave(plot = p, filename = "Mega_analysis_ORR.pdf", width = 10, height = 8, device = "pdf")
p <- fit1 %>%
filter(species %in% c(sig_decreasing, sig_increasing)) %>%
ggplot(aes(y=reorder(factor(species),Freq), x=Freq, xmin=.lower, xmax=.upper)) +
ggdist::geom_interval(aes(alpha=.width), color="orange3") +
scale_alpha_continuous("Credible interval", range=c(.7, .15), breaks=c(0.5, 0.75, 0.90, 0.95, 0.97)) +
geom_point() +
theme(
legend.key=element_rect(fill='white'),
legend.text=element_text(size=10, color="black"),
legend.position=c(0.5, 0,8),
strip.background=element_blank(),
strip.text=element_blank(),
panel.grid.major=element_blank(),
panel.grid.minor=element_blank(),
panel.background=element_rect(fill="white"),
panel.border=element_rect(colour="black", fill=NA, size=1),
axis.ticks.length=unit(0.25,"cm"),
axis.text.x=element_text(size=8.5, color="black"),
axis.text.y=element_text(size=7.5, color="black")) +
labs(x="Log-Ratio Value", y=NULL) +
geom_vline(xintercept=0, linetype="dashed", color="darkgray")
ggsave(plot = p, filename = "Mega_analysis_ORR.pdf", width = 10, height = 6, device = "pdf")
p <- fit1 %>%
filter(species %in% c(sig_decreasing, sig_increasing)) %>%
ggplot(aes(y=reorder(factor(species),Freq), x=Freq, xmin=.lower, xmax=.upper)) +
ggdist::geom_interval(aes(alpha=.width), color="orange3") +
scale_alpha_continuous("Credible interval", range=c(.7, .15), breaks=c(0.5, 0.75, 0.90, 0.95, 0.97)) +
geom_point() +
theme(
legend.key=element_rect(fill='white'),
legend.text=element_text(size=10, color="black"),
legend.position=c(0.5, 0,8),
strip.background=element_blank(),
strip.text=element_blank(),
panel.grid.major=element_blank(),
panel.grid.minor=element_blank(),
panel.background=element_rect(fill="white"),
panel.border=element_rect(colour="black", fill=NA, size=1),
axis.ticks.length=unit(0.25,"cm"),
axis.text.x=element_text(size=8.5, color="black"),
axis.text.y=element_text(size=7.5, color="black")) +
labs(x="Log-Ratio Value", y=NULL) +
geom_vline(xintercept=0, linetype="dashed", color="darkgray")
ggsave(plot = p, filename = "Mega_analysis_ORR.pdf", width = 10, height = 5, device = "pdf")
metaphlan_species <- readRDS("Projects/NRCO/R_vs_NR_meta_analysis.rds")
metaphlan_species <- subset_samples(metaphlan_species, !(is.na(metaphlan_species@sam_data$RECIST)))
metaphlan_species@sam_data$ORR <- NA
metaphlan_species@sam_data$ORR[which(metaphlan_species@sam_data$RECIST == "PD" | metaphlan_species@sam_data$RECIST == "SD")] <- "NR"
metaphlan_species@sam_data$ORR[which(metaphlan_species@sam_data$RECIST == "CR" | metaphlan_species@sam_data$RECIST == "PR")] <- "R"
metaphlan_species@sam_data$ORR[which(metaphlan_species@sam_data$RECIST == "PR_CR")] <- "R"
metaphlan_species <- prune_taxa(taxa_sums(metaphlan_species)>0, metaphlan_species)
metaphlan_species@sam_data[metaphlan_species@sam_data$Cohort == "PRIMM-UK_LeeK_2022",]
metaphlan_species <- readRDS("Projects/NRCO/R_vs_NR_meta_analysis.rds")
metaphlan_species <- subset_samples(metaphlan_species, !(is.na(metaphlan_species@sam_data$RECIST)))
metaphlan_species@sam_data$ORR <- NA
metaphlan_species@sam_data$ORR[which(metaphlan_species@sam_data$RECIST == "PD" | metaphlan_species@sam_data$RECIST == "SD")] <- "NR"
metaphlan_species@sam_data$ORR[which(metaphlan_species@sam_data$RECIST == "CR" | metaphlan_species@sam_data$RECIST == "PR")] <- "R"
metaphlan_species@sam_data$ORR[which(metaphlan_species@sam_data$RECIST == "PR_CR")] <- "R"
metaphlan_species <- prune_taxa(taxa_sums(metaphlan_species)>0, metaphlan_species)
# New function
clr_pca <- function(ftbl, pseudocount=T) {
if(pseudocount==T){
# this assumes taxa are on rows. But as standard functions expect rows as samples, we transpose()
dclr <- apply(t(ftbl)+0.00001, 1, function(x) log(x)-mean(log(x)))
pcx <- prcomp(t(dclr))
out <- list(clr=dclr, pca=pcx)
return(out)
}else{
ftbl_zim <- zCompositions::cmultRepl(t(ftbl), method="CZM", label=0)
dclr <- apply(ftbl_zim, 1, function(x) log(x)-mean(log(x)))
pcx <- prcomp(t(dclr))
out <- list(clr=dclr, pca=pcx)
return(out)
}
}
aitchison_distance <- function(ftbl_clr, similarity=T) {
if(similarity==T) {
# this assumes taxa are rows
ftbl_clr <- t(ftbl_clr)
aitch_sim <- dist(ftbl_clr, method="euclidean")
aitch_sim <- (1/(1+aitch_dist/max(aitch_dist)))
#aitch_sim_mat <- as.matrix(aitch_sim)
return(aitch_sim)
}else{
ftbl_clr <- t(ftbl_clr)
aitch_dist <- dist(ftbl_clr, method="euclidean")
aitch_dist <- aitch_dist/max(aitch_dist)
#aitch_dist_mat <- as.matrix(aitch_dist)
return(aitch_dist)
}
}
metaphlan_species_clr <- clr_pca(otu_table(metaphlan_species), pseudocount=F)
colnames(metaphlan_species@otu_table) <- gsub("-", "_", colnames(metaphlan_species@otu_table))
metaphlan_species@sam_data$Cohort <- gsub("-", "_", metaphlan_species@sam_data$Cohort)
metaphlan_species_clr <- clr_pca(otu_table(metaphlan_species), pseudocount=F)
metaphlan_species_clr <- clr_pca(otu_table(metaphlan_species), pseudocount=F)
metaphlan_species_clr <- subset_samples(metaphlan_species_clr, metaphlan_species_clr@sam_data$Cohort %in% c("DerosaL_2020", "DerosaL_2022", "PRIMM_NL_LeeK_2022", "PRIMM_UK_LeeK_2022", "Manchester_LeeK_2022", "FrankelAE_2017", "GopalakrishnanV_2018", "McCullochJA_2022", "RoutyB_2022_Lung"))
metaphlan_species_clr
metaphlan_species_clr$clr
clr_mp4 <- metaphlan_species
otu_table(clr_mp4) <- otu_table(t(metaphlan_species_clr$clr), taxa_are_rows = T)
otu_table(clr_mp4)
clr_mp4
metaphlan_species <- readRDS("Projects/NRCO/R_vs_NR_meta_analysis.rds")
metaphlan_species <- subset_samples(metaphlan_species, !(is.na(metaphlan_species@sam_data$RECIST)))
metaphlan_species@sam_data$ORR <- NA
metaphlan_species@sam_data$ORR[which(metaphlan_species@sam_data$RECIST == "PD" | metaphlan_species@sam_data$RECIST == "SD")] <- "NR"
metaphlan_species@sam_data$ORR[which(metaphlan_species@sam_data$RECIST == "CR" | metaphlan_species@sam_data$RECIST == "PR")] <- "R"
metaphlan_species@sam_data$ORR[which(metaphlan_species@sam_data$RECIST == "PR_CR")] <- "R"
colnames(metaphlan_species@otu_table) <- gsub("-", "_", colnames(metaphlan_species@otu_table))
metaphlan_species@sam_data$Cohort <- gsub("-", "_", metaphlan_species@sam_data$Cohort)
metaphlan_species <- subset_samples(metaphlan_species, metaphlan_species@sam_data$Cohort %in% c("DerosaL_2020", "DerosaL_2022", "PRIMM_NL_LeeK_2022", "PRIMM_UK_LeeK_2022", "Manchester_LeeK_2022", "FrankelAE_2017", "GopalakrishnanV_2018", "McCullochJA_2022", "RoutyB_2022_Lung"))
metaphlan_species <- prune_taxa(taxa_sums(metaphlan_species)>0, metaphlan_species)
metaphlan_species_clr <- clr_pca(otu_table(metaphlan_species), pseudocount=F)
rbind(metaphlan_species@sam_data$Cohort, metaphlan_species@sam_data$ORR, t(metaphlan_species_clr))
rbind(metaphlan_species@sam_data$Cohort, metaphlan_species@sam_data$ORR, t(metaphlan_species_clr$clr))
rbind(metaphlan_species@sam_data$Cohort, metaphlan_species@sam_data$ORR, metaphlan_species_clr$clr)
write.table(rbind(metaphlan_species@sam_data$Cohort, metaphlan_species@sam_data$ORR, metaphlan_species_clr$clr), "Projects/NRCO/Revision/MetaML_ORR_PDSDvsPRCR_clr.txt", sep = "\t", quote = F, row.names = T, col.names = T)
write.table(rbind(metaphlan_species@sam_data$Cohort, metaphlan_species@sam_data$ORR, metaphlan_species@otu_table), "Projects/NRCO/Revision/MetaML_ORR_PDSDvsPRCR.txt", sep = "\t", quote = F, row.names = T, col.names = T)
table(metaphlan_species@sam_data$ORR, metaphlan_species@sam_data$Cohort)
table(metaphlan_species@sam_data$Cohort, metaphlan_species@sam_data$ORR)
metaphlan_species
### ----- LODO LASSO --------------------------------------------------------------------------------------------------------------------------
library(SIAMCAT)
metaphlan_species <- readRDS("Projects/NRCO/R_vs_NR_meta_analysis.rds")
metaphlan_species <- subset_samples(metaphlan_species, !(is.na(metaphlan_species@sam_data$RECIST)))
metaphlan_species@sam_data$ORR <- NA
metaphlan_species@sam_data$ORR[which(metaphlan_species@sam_data$RECIST == "PD" | metaphlan_species@sam_data$RECIST == "SD")] <- "NR"
metaphlan_species@sam_data$ORR[which(metaphlan_species@sam_data$RECIST == "CR" | metaphlan_species@sam_data$RECIST == "PR")] <- "R"
metaphlan_species@sam_data$ORR[which(metaphlan_species@sam_data$RECIST == "PR_CR")] <- "R"
metaphlan_species <- subset_samples(metaphlan_species, metaphlan_species@sam_data$Cohort %in% c("DerosaL_2020", "DerosaL_2022", "PRIMM_NL_LeeK_2022", "PRIMM_UK_LeeK_2022", "Manchester_LeeK_2022", "FrankelAE_2017", "GopalakrishnanV_2018", "McCullochJA_2022", "RoutyB_2022_Lung"))
metaphlan_species <- prune_taxa(taxa_sums(metaphlan_species)>0, metaphlan_species)
colnames(metaphlan_species@otu_table) <- gsub("-", "_", colnames(metaphlan_species@otu_table))
metaphlan_species@sam_data$Cohort <- gsub("-", "_", metaphlan_species@sam_data$Cohort)
print("Running Leave-one-centre-out...")
datasets <- as.character(unique(sample_data(metaphlan_species)$Cohort))
labels_to_predict <- "ORR"
siamcat_ml_results <- expand.grid(datasets, labels_to_predict)
siamcat_ml_results <- as.data.frame(siamcat_ml_results)
siamcat_ml_results$AUC_ROC <- NA
siamcat_ml_results$AUC_PRC <- NA
colnames(siamcat_ml_results) <- c("Cohort", "Label", "AUC_ROC", "AUC_PRC")
for (j in 1:length(datasets)) {
all_datasets <- subset_samples(metaphlan_species, sample_data(metaphlan_species)$Cohort != datasets[j])
leftout_dataset <- subset_samples(metaphlan_species, sample_data(metaphlan_species)$Cohort == datasets[j])
if ( any(table(sample_data(all_datasets)[,labels_to_predict]) <= 5)  | any(table(sample_data(leftout_dataset)[,labels_to_predict]) <= 5) | dim(table(sample_data(leftout_dataset)[,labels_to_predict]))
< 2 | dim(table(sample_data(all_datasets)[,labels_to_predict])) < 2 ) {
next()
}
else {
labels.response <- create.label(meta=sample_data(all_datasets), label=labels_to_predict, case="R")
siamcat <- siamcat(feat=otu_table(all_datasets) / 100, label=labels.response, meta=sample_data(all_datasets))
?normalize.features
siamcat <- normalize.features(siamcat, norm.method = "log.clr", norm.param = list(log.n0 = 1e-06, sd.min.q = 0.1), verbose = 2, feature.type = "original")
siamcat <-  create.data.split(siamcat, num.folds = 2, num.resample = 1)
siamcat <- train.model(siamcat, method = "lasso")
siamcat <- make.predictions(siamcat)
siamcat <-  evaluate.predictions(siamcat)
#LeftOut Dataset
labels.response_leftout <- create.label(meta=sample_data(leftout_dataset), label=labels_to_predict, case="R")
siamcat_leftout <- siamcat(feat=otu_table(leftout_dataset) / 100, label=labels.response_leftout, meta=sample_data(leftout_dataset))
siamcat_leftout <- normalize.features(siamcat_leftout, verbose = 2, norm.param = norm_params(siamcat), feature.type = "original")
siamcat_leftout <- make.predictions(siamcat, siamcat.holdout = siamcat_leftout, normalize.holdout = FALSE)
siamcat_leftout <-  evaluate.predictions(siamcat_leftout)
position <- which(siamcat_ml_results$Cohort == datasets[j] & siamcat_ml_results$Label == labels_to_predict)
siamcat_ml_results[position,3] <- eval_data(siamcat_leftout)$auroc
siamcat_ml_results[position,4] <- eval_data(siamcat_leftout)$auprc
}
saveRDS(siamcat_leftout, paste("LODO_",  datasets[j], "_", labels_to_predict, ".rds", sep = ""))
}
siamcat <- readRDS("LODO_RoutyB_2022_Lung_ORR.rds")
siamcat@eval_data$auroc
siamcat <- readRDS("LODO_DerosaL_2020_ORR.rds")
siamcat@eval_data$auroc
siamcat <- readRDS("LODO_DerosaL_2022_ORR.rds")
siamcat@eval_data$auroc
siamcat <- readRDS("LODO_FrankelAE_2017_ORR.rds")
siamcat@eval_data$auroc
siamcat <- readRDS("LODO_GopalakrishnanV_2018_ORR.rds")
siamcat@eval_data$auroc
siamcat <- readRDS("LODO_Manchester_LeeK_2022_ORR.rds")
siamcat@eval_data$auroc
siamcat <- readRDS("LODO_McCullochJA_2022_ORR.rds")
siamcat@eval_data$auroc
siamcat <- readRDS("LODO_PRIMM_UK_LeeK_2022_ORR.rds")
siamcat@eval_data$auroc
siamcat <- readRDS("LODO_PRIMM_NL_LeeK_2022_ORR.rds")
siamcat@eval_data$auroc
set_wd("NRCO_GOMS/")
setwd("NRCO_GOMS/")
metaphlan_species <- readRDS("data/R_vs_NR_meta_analysis.rds")
print("Running Leave-one-centre-out...")
datasets <- as.character(unique(sample_data(metaphlan_species)$Cohort))
labels_to_predict <- "ORR"
siamcat_ml_results <- expand.grid(datasets, labels_to_predict)
siamcat_ml_results <- as.data.frame(siamcat_ml_results)
siamcat_ml_results$AUC_ROC <- NA
siamcat_ml_results$AUC_PRC <- NA
colnames(siamcat_ml_results) <- c("Cohort", "Label", "AUC_ROC", "AUC_PRC")
for (j in 1:length(datasets)) {
all_datasets <- subset_samples(metaphlan_species, sample_data(metaphlan_species)$Cohort != datasets[j])
leftout_dataset <- subset_samples(metaphlan_species, sample_data(metaphlan_species)$Cohort == datasets[j])
if ( any(table(sample_data(all_datasets)[,labels_to_predict]) <= 5)  | any(table(sample_data(leftout_dataset)[,labels_to_predict]) <= 5) | dim(table(sample_data(leftout_dataset)[,labels_to_predict]))
< 2 | dim(table(sample_data(all_datasets)[,labels_to_predict])) < 2 ) {
next()
}
else {
labels.response <- create.label(meta=sample_data(all_datasets), label=labels_to_predict, case="R")
siamcat <- siamcat(feat=otu_table(all_datasets) / 100, label=labels.response, meta=sample_data(all_datasets))
?normalize.features
siamcat <- normalize.features(siamcat, norm.method = "log.clr", norm.param = list(log.n0 = 1e-06, sd.min.q = 0.1), verbose = 2, feature.type = "original")
siamcat <-  create.data.split(siamcat, num.folds = 2, num.resample = 1)
siamcat <- train.model(siamcat, method = "lasso")
siamcat <- make.predictions(siamcat)
siamcat <-  evaluate.predictions(siamcat)
#LeftOut Dataset
labels.response_leftout <- create.label(meta=sample_data(leftout_dataset), label=labels_to_predict, case="R")
siamcat_leftout <- siamcat(feat=otu_table(leftout_dataset) / 100, label=labels.response_leftout, meta=sample_data(leftout_dataset))
siamcat_leftout <- normalize.features(siamcat_leftout, verbose = 2, norm.param = norm_params(siamcat), feature.type = "original")
siamcat_leftout <- make.predictions(siamcat, siamcat.holdout = siamcat_leftout, normalize.holdout = FALSE)
siamcat_leftout <-  evaluate.predictions(siamcat_leftout)
position <- which(siamcat_ml_results$Cohort == datasets[j] & siamcat_ml_results$Label == labels_to_predict)
siamcat_ml_results[position,3] <- eval_data(siamcat_leftout)$auroc
siamcat_ml_results[position,4] <- eval_data(siamcat_leftout)$auprc
}
#saveRDS(siamcat_leftout, paste("LODO_",  datasets[j], "_", labels_to_predict, ".rds", sep = ""))
}
siamcat_ml_results
unique(metaphlan_species@sam_data$Cohort)
metaphlan_species <- subset_samples(metaphlan_species, metaphlan_species@sam_data$Cohort %in% ("Leeds_LeeK_2022", "Barcelona_LeeK_2022", "WindTT_2020"))
metaphlan_species <- readRDS("data/R_vs_NR_meta_analysis.rds")
unique(metaphlan_species@sam_data$Cohort)
metaphlan_species <- subset_samples(metaphlan_species, !(metaphlan_species@sam_data$Cohort %in% c("Leeds_LeeK_2022", "Barcelona_LeeK_2022", "WindTT_2020")))
metaphlan_species
metaphlan_species <- readRDS("data/R_vs_NR_meta_analysis.rds")
unique(metaphlan_species@sam_data$Cohort)
metaphlan_species <- subset_samples(metaphlan_species, !(metaphlan_species@sam_data$Cohort %in% c("Leeds_LeeK_2022", "Barcelona_LeeK_2022", "WindTT_2020")))
metaphlan_species <- readRDS("data/R_vs_NR_meta_analysis.rds")
metaphlan_species <- subset_samples(metaphlan_species, !(metaphlan_species@sam_data$Cohort %in% c("Leeds_LeeK_2022", "Barcelona_LeeK_2022", "WindTT_2020")))
metaphlan_species <- prune_taxa(taxa_sums(metaphlan_species)>0, metaphlan_species)
print("Running Leave-one-centre-out...")
datasets <- as.character(unique(sample_data(metaphlan_species)$Cohort))
labels_to_predict <- "ORR"
siamcat_ml_results <- expand.grid(datasets, labels_to_predict)
siamcat_ml_results <- as.data.frame(siamcat_ml_results)
siamcat_ml_results$AUC_ROC <- NA
siamcat_ml_results$AUC_PRC <- NA
colnames(siamcat_ml_results) <- c("Cohort", "Label", "AUC_ROC", "AUC_PRC")
for (j in 1:length(datasets)) {
all_datasets <- subset_samples(metaphlan_species, sample_data(metaphlan_species)$Cohort != datasets[j])
leftout_dataset <- subset_samples(metaphlan_species, sample_data(metaphlan_species)$Cohort == datasets[j])
if ( any(table(sample_data(all_datasets)[,labels_to_predict]) <= 5)  | any(table(sample_data(leftout_dataset)[,labels_to_predict]) <= 5) | dim(table(sample_data(leftout_dataset)[,labels_to_predict]))
< 2 | dim(table(sample_data(all_datasets)[,labels_to_predict])) < 2 ) {
next()
}
else {
labels.response <- create.label(meta=sample_data(all_datasets), label=labels_to_predict, case="R")
siamcat <- siamcat(feat=otu_table(all_datasets) / 100, label=labels.response, meta=sample_data(all_datasets))
siamcat <- normalize.features(siamcat, norm.method = "log.clr", norm.param = list(log.n0 = 1e-06, sd.min.q = 0.1), verbose = 2, feature.type = "original")
siamcat <-  create.data.split(siamcat, num.folds = 2, num.resample = 1)
siamcat <- train.model(siamcat, method = "lasso")
siamcat <- make.predictions(siamcat)
siamcat <-  evaluate.predictions(siamcat)
#LeftOut Dataset
labels.response_leftout <- create.label(meta=sample_data(leftout_dataset), label=labels_to_predict, case="R")
siamcat_leftout <- siamcat(feat=otu_table(leftout_dataset) / 100, label=labels.response_leftout, meta=sample_data(leftout_dataset))
siamcat_leftout <- normalize.features(siamcat_leftout, verbose = 2, norm.param = norm_params(siamcat), feature.type = "original")
siamcat_leftout <- make.predictions(siamcat, siamcat.holdout = siamcat_leftout, normalize.holdout = FALSE)
siamcat_leftout <-  evaluate.predictions(siamcat_leftout)
position <- which(siamcat_ml_results$Cohort == datasets[j] & siamcat_ml_results$Label == labels_to_predict)
siamcat_ml_results[position,3] <- eval_data(siamcat_leftout)$auroc
siamcat_ml_results[position,4] <- eval_data(siamcat_leftout)$auprc
}
#saveRDS(siamcat_leftout, paste("LODO_",  datasets[j], "_", labels_to_predict, ".rds", sep = ""))
}
siamcat_ml_results
siamcat_ml_results
metaphlan_species@sam_data$Cohort
metaphlan_species@sam_data$Cohort <- gsub("RoutyB_2018_Lung", "RoutyB_2022_Lung", metaphlan_species@sam_data$Cohort)
metaphlan_species@sam_data$Cohort
metaphlan_species@sam_data$Cohort <- gsub("RoutyB_2022_Lung", "RoutyB_2018_Lung", metaphlan_species@sam_data$Cohort)
metaphlan_species@sam_data$Cohort
